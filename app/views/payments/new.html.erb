<% title receiving_fund.name %>

<%= render :partial => 'accounts/payment_cards/new', :formats => [:html], :locals => {:callback_function => 'AddCardToGiveFormCallback'} %>

<h3>Complete this form to give</h3>
<p class='lead'>Your Generosity is greatly appreciated</p>

<%= simple_form_for @payment, :html => {:class => 'form-horizontal'}, :validate => true do |f| %>

  <%= f.hidden_field :fund_id, :value => (params[:payment][:fund_id] rescue receiving_fund.id) %>
  
  <%#= f.input :amount_in_cents,   :label => "Amount", 
                                  :collection => [['$ 2', 200], ['$ 5', 500], ['$ 10', 1000], ['Other', 'other']],
                                  :include_blank => false,
                                  :required => true %>
  <%= f.input :amount_in_dollars, :required => true, :wrapper => :prepend_append, :label => 'Amount', :input_html => {:style => 'width:50px'} do %>
    <%= content_tag :span, "$", :class => "add-on" %>
	<%= f.input_field :amount_in_dollars, :class => 'currency_input span1', :style => 'text-align:right;' %>
    <%= content_tag :span, ".00", :class => "add-on add-on-append" %>
    
  <% end %>

  <%= f.input :amount_in_cents,   :as => :hidden %>
  

  <%= f.input :is_anonymous, :label => "Anonymous",
  							:include_blank => false,
  							 :collection => [['Give Publically',false],["Give Anonymously",true]] %>
  
  <%= f.input :message, :label => 'Optional Message',
  						:as => :string,
  						:placeholder => 'ex. "Thanks!"' %>   

  <%= simple_fields_for :payment_card_used, Accounts::PaymentCard.new, :validate => true do |payment_card_form| %>

  	<% signed_in_user_cards = user_signed_in? ? current_user.account.payment_cards.collect {|card| ["#{card.card_type} (x#{card.last_4_digits})", card.balanced_uri]} : nil %>
  	<% new_card_option = ['New Card', 'new'] %>
  	<% card_select_options = signed_in_user_cards.present? ? signed_in_user_cards.append(new_card_option) : [new_card_option] %>
 
    <%= payment_card_form.input :balanced_uri, :validate => {:uniqueness => false}, :label => "Payment Card",
		  													 :as => :select,
		  													 :collection => card_select_options,
		  													 :selected => ((user_signed_in? and current_user.account.payment_cards.first.present?) ? current_user.account.payment_cards.first.id : nil) ,
		  													 :include_blank => false,
		  													 :prompt => 'Select Payment Card' %>

	<%= payment_card_form.input :remember_card, :as => :hidden if user_signed_in? %>	
		  													 
  <% end %>
  
  <div class="control-group">
    <div class="controls">
      <%= f.button :submit, :value => 'Give',:class => 'btn-primary' %>      
      <%= submit_tag 'Cancel', :type => :reset, :class => "btn" %>      
    </div>
  </div>

<% end %>

<script type='text/javascript'>

	$('select#payment_card_used_balanced_uri').change(function (){
		var parent_modal = $('#add_payment_card_modal')
		var remember_card_input = $('#payment_card_used_remember_card');
		remember_card_input.val(false); // we dont remember cards by default
		if ($(this).val() == 'new') {
			parent_modal.modal('show');
			$(this).val('');
			updateRememberCardInput();
		}		
	});

	$("input[name='payment[amount_in_dollars]']").change(function(){
		$("input[name='payment[amount_in_cents]']").val($(this).val() * 100);
	});

	$("[name='accounts_payment_card_submission[remember_card]']").change(function (){
		updateRememberCardInput();
	});

	function updateRememberCardInput(){
		var remember_card_input = $('#payment_card_used_remember_card');
		var rembmer_card_submission_input = $("[name='accounts_payment_card_submission[remember_card]']");
		remember_card_input.val(rembmer_card_submission_input.is(':checked'));
	}			

	function addPaymentCardToSelect(new_label, new_value) {
		var target_select = $('select#payment_card_used_balanced_uri');
	 	var index_to_insert_before = 1;//$("select#payment_card_used_balanced_uri option[value='new']").index('option');
		target_select.find("option:eq(" + index_to_insert_before + ")").before("<option value=" + new_value + ">" + new_label + "</option>");
		target_select.val(new_value);
		target_select.trigger('element:validate:pass').data('valid', true);  
	}

	function AddCardToGiveFormCallback(response) {
	  var tag = (response.status < 300) ? 'pre' : 'code';
	  debug(tag, JSON.stringify(response));
	  $('.modal.in').spin(false);
	  switch (response.status) {
	    case 201: // OK
	    	$('.modal.in').modal("hide");
	    	// Get Balanced URI from validated card
	    	var uri_for_validated_card 	 = response.data.uri;
	    	var label_for_validated_card = response.data.brand + ' (x' + response.data.last_four + ')';
	    	// Set Balanced URI select in payment form to validated card 
	    	addPaymentCardToSelect(label_for_validated_card, uri_for_validated_card);
	    	// Alert the user their card has been validated
			window.setTimeout ( function() {                  
				flashNow('Your card was successfully validated', 'notice');
			}, 300 );                   
			break;
	    case 400:
	    case 403: // missing/malformed data - check response.error for details	    
	      $.each( response.error, function( key, value ) {
	        $("input[name='"+key+"']").trigger('element:validate:fail', value).data('valid', false);	      
	      });
	      break;
	    case 402: // we couldn't authorize the buyer's credit card - check response.error for details
	        $("input[name='card_number']").trigger('element:validate:fail', 'Could not authorize card').data('valid', false);	      
	      break;
	    case 404: // your marketplace URI is incorrect
	      break;
	    default: // we did something unexpected - check response.error for details
	      break;
	  }
	}
</script>